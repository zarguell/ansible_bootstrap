---
- name: Include OS-specific variables
  ansible.builtin.include_tasks: include_os_vars.yml
  tags: always

- name: Validate system requirements
  ansible.builtin.assert:
    that:
      - ansible_memtotal_mb >= 512
      - ansible_processor_vcpus >= 1
      - ansible_mounts | selectattr('mount', 'equalto', '/') | list | first | default({}) | dict2items | selectattr('key', 'equalto', 'size_available') | map(attribute='value') | first | default(0) > 1000000000
    fail_msg: "System does not meet minimum requirements (512MB RAM, 1 CPU, 1GB free disk space)"
    success_msg: "System meets minimum requirements"

- name: Gather package facts
  ansible.builtin.package_facts:
    manager: auto

- name: Update package cache (Debian/Ubuntu)
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 3600
  when: ansible_os_family == "Debian"
  register: apt_update_result
  retries: 3
  delay: 5
  until: apt_update_result is succeeded

- name: Update package cache (RedHat/CentOS)
  ansible.builtin.dnf:
    update_cache: true
  when: ansible_os_family == "RedHat"
  register: dnf_update_result
  retries: 3
  delay: 5
  until: dnf_update_result is succeeded

- name: Ensure essential packages are installed
  ansible.builtin.package:
    name: "{{ common_essential_packages }}"
    state: present
  register: package_install_result
  retries: 3
  delay: 5
  until: package_install_result is succeeded

- name: Verify critical services are available
  ansible.builtin.systemd:
    name: "{{ item }}"
  register: service_status
  failed_when: false
  changed_when: false
  loop:
    - ssh
    - sshd
    - systemd-resolved
    - networking
    - NetworkManager

- name: Set SSH service name based on OS
  ansible.builtin.set_fact:
    ssh_service_name: "{{ 'sshd' if ansible_os_family == 'RedHat' else 'ssh' }}"

- name: Backup original SSH config
  ansible.builtin.copy:
    src: /etc/ssh/sshd_config
    dest: /etc/ssh/sshd_config.backup.{{ ansible_date_time.epoch }}
    remote_src: true
    mode: preserve
    backup: true
  when: not ansible_check_mode

- name: Validate SSH config before applying changes
  ansible.builtin.command: sshd -t -f /etc/ssh/sshd_config
  register: sshd_config_test
  changed_when: false
  failed_when: sshd_config_test.rc != 0

- name: Configure timezone with validation
  community.general.timezone:
    name: "{{ system_timezone | default('UTC') }}"
  register: timezone_result
  when: system_timezone is defined

- name: Ensure hostname is set properly
  ansible.builtin.hostname:
    name: "{{ inventory_hostname }}"
  when: inventory_hostname != "localhost"
